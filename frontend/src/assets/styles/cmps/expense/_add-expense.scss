.add-expense {
    height: 36px;
 
    .expense-description{
        border-inline-end: none;
        min-width: unset;
        flex: unset;
        .before{
            opacity: 0.5;
        }
    }

    input {
        padding-inline-start: 15px;
        background-color: #fff;
        height: 31px;
        border: 1px solid rgb(208, 212, 228);
        
        &.description{
            width: 100%;
        }

        &:hover {
            border-color: $clr3;
        }
        
        &:focus {
            border-color: $clr5;
            & + .btn-container input{
                border-color: $clr5;
            }
        } 
    }
    
//     .btn-container {
//         background-color: $clr2;
//         transition: 0.5s;
//     }
    
//     .btn {
//         height: 100%;
//         position: relative;
//         right: 39px;
//         border-radius:0;
//     }
    
//     &::after, &::before{
//         opacity: 0.5;;
//     }
    
    // &:hover {
    //     cursor: text;
    //     background-color: $clr6;
    //     .first-cell .before,  &::after, &::before{
    //         opacity: 1;
    //     }
    // }
    

// .add-expense{
//     .btn-container {
//         position: absolute;

//     }
// }

    .cell, .checkbox-wrapper{
        border-bottom: 1px solid $clr8;
        box-shadow: 0 8px 8px -8px rgba(0,0,0, 0.1);
    } 

    .before-row{
        opacity: .5;
    }

    .empty{
        flex-grow: 1;
        border-inline-start: none;
    }

}

























// room = {
// 	id: string,
// 	title: string,
// 	crowds: corwd[],
//   speakers: speaker[],
//   speakerIds:[]
// }

// corwd = {
// 	name: string,
// }

// speaker = {
// 	name: string,
//   following: user[],
//   isAdmin: boolean
// }

// function reqToSpeak(){
// 	room.users.forEach(user =>{
// 		if(user.isSpeaker)
// 	})
// }

// const room = {
// 	id: 1,
//   title: 'Room 1',
//   users: [
//      { id: 1, status: 'crowd'}, {id: 2, status: 'speaker', following_ids: [1] }, {id: 3, status: 'crowd'}
//   ]
// }

// function Room({room}) {

// const speakerStatusMap =  room.users.reduce((acc,user)=>{
// 		if(user.status === "speaker" || "admin") acc.speaker.push(user)
//     else if (room.users.some(currUser => currUser.status.following_ids && user.status.following_ids.contains(user.id))){
//     acc.followedBy.push(user)
//     } else acc.crowd.push(user)
//     return acc
// }, { speaker: [], crowd: [], followedBy: []})

//   return(
// 		< section/>
// 			<Section title:"Speakers" users:{speakerStatusMap.speaker} />
//  			<Section title:"Speakers" users:{followings} />
//  			<Section title:"Crowd" users:{speakerStatusMap.crowd} />

// 		< section/>

//   )
// }
